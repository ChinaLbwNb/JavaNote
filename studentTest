package com.packageTest;
import java.lang.*;
import com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;
import com.sun.xml.internal.ws.wsdl.writer.document.Import;

//学生类测试  不管什么类 类里面就是属性和方法 (所有非成员变量！！！非方法都不能直接放在类中，例如sout不能直接写 要创建新方法来)
public class studentTest {
    //属性
    String name;
    int age;

    //方法  一个类即使什么也不写 也会存在一个无参构造器
    public void study() {
        System.out.println(this.name + "studying");
    }
    public void study2() {
        System.out.println(this.name + "studying");
    }
    //构造器 一个类即使什么也不写 也会存在一个无参构造器 jdk自动加这个
    public studentTest() {
        this.name = "父类";
        System.out.println("StudentTest的构造器调用啦！");
    }

    //封装测试
    private int height;//先用private修饰

    private String school;

    //然后使用alt+insert写入get set方法，返回值是原类型
    //get方法目的是获取这个属性数据，set是设置数据
//------------------------------------------------------------------------------get set
    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;//这个白height是 int变量，紫色的是属性或者叫成员变量

    }

    public String getSchool() {
        return school;
    }

    public void setSchool(String school) {
        this.school = school;//this就等于当前类名 this.school=StudentTest.school
//------------------------------------------------------------------------------get set
    }
}
//主类之外了

    //子类 继承extends 多态测试
    class student2 extends studentTest {
        //父类私有属性无法直接使用 通过get方法
        public student2() {
            System.out.println("Student2的构造器调用啦！");
        }
     private String name="子类";
        //this和super对比 （方法前面也可以加this或super来区分，不加就是本类）
     public void demo1(){
         System.out.println("this的输出"+this.name);
         System.out.println("super的输出"+super.name);
     }

     //重写Ouverride  方法名相同 形参相同（形参不同的是重载，且是同个类里面 返回类型也分子类父类 子类<=父类的返回类型 最好一样）
        //重写是子类重写父类 不是同一个类里面
        @Override
        public void study() {
            super.study();
        }
        public void go(){

        }
//抽象类 abstract class
        public abstract class chouXiang{
         public abstract void demo02();//抽象类可以不写代码块 目的就是让别人写 所以继承抽象类必须重写
         public  void demo03(){//可以写普通方法 普通类不能写抽象方法
             System.out.println("抽象测试");
        }
      }

      //接口interface定义
        public interface jieKou{
         public void fly();
}


//implements关键字 等价与 extends
        public class rnm implements jieKou{

    @Override
    public void fly() { //和抽象类一样 继承了必须重写方法 接口里面的都是抽象的

    }
  }

  //匿名内部类 作用暂不理解
  chouXiang asd=new chouXiang() {
      @Override
      public void demo02() {

      }

      @Override
      public void demo03() {

      }
  };
}
